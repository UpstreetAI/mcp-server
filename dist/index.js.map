{"version":3,"sources":["../src/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport path from 'path';\nimport fs from 'fs/promises';\nimport child_process from 'child_process';\nimport { Hono } from 'hono';\nimport { serve } from '@hono/node-server';\nimport dotenv from 'dotenv';\nimport { Command } from 'commander';\nimport { mkdirp } from 'mkdirp';\nimport { rimraf } from 'rimraf';\nimport { PnpmPackageLookup } from \"pnpm-package-lookup\";\n\n// PORT=8000 pnpm dev -- ./mcp-servers.json\n\nconst __dirname = path.join(path.dirname(import.meta.url.replace('file://', '')), '..');\n\nconst sortNpmPackages = (packageSpecifiers: string[]) => {\n  const npmPackages: string[] = [];\n  const githubPackages: string[] = [];\n  for (const packageSpecifier of packageSpecifiers) {\n    if (packageSpecifier.startsWith('github:')) {\n      githubPackages.push(packageSpecifier);\n    } else {\n      npmPackages.push(packageSpecifier);\n    }\n  }\n  return {\n    npm: npmPackages,\n    github: githubPackages,\n  };\n};\n\nclass SimpleMcpServer {\n  private serversJson: {\n    servers: string[];\n    envs: Record<string, string>[];\n  };\n  private port: number;\n  private internalPortStart: number;\n  constructor({\n    serversJson,\n    port = 3000,\n    internalPortStart = 9000,\n  }: {\n    serversJson: any;\n    port?: number;\n    internalPortStart?: number;\n  }) {\n    this.serversJson = serversJson;\n    this.port = port;\n    this.internalPortStart = internalPortStart;\n  }\n  async start() {\n    // create the packages directory\n    const appDir = path.join(__dirname, 'app');\n    await rimraf(appDir);\n    await mkdirp(appDir);\n    await fs.writeFile(path.join(appDir, 'package.json'), JSON.stringify({}));\n    const appPackagesDir = path.join(appDir, 'packages');\n    await mkdirp(appPackagesDir);\n\n    // install the servers with pnpm\n    const {\n      servers = [],\n      envs = Array(servers.length).fill(null).map(() => ({})),\n    } = this.serversJson;\n    let {\n      npm,\n      github,\n    } = sortNpmPackages(servers);\n    const allServers = [...npm, ...github];\n\n    // git clone and pnpm build the github packages\n    github = await Promise.all(github.map(async (packageSpecifier) => {\n      const packageName = packageSpecifier.replace('github:', '');\n      const packageSpecifier2 = `https://github.com/${packageName}`;\n      const packageBaseName = path.basename(packageSpecifier2);\n\n      const cp = child_process.spawn('git', [\n        'clone',\n        packageSpecifier2,\n      ], {\n        cwd: appPackagesDir,\n      });\n      cp.stdout.pipe(process.stdout);\n      cp.stderr.pipe(process.stderr);\n      await new Promise((resolve, reject) => {\n        cp.on('close', (code) => {\n          if (code === 0) {\n            resolve(null);\n          } else {\n            reject(new Error(`git clone failed with code ${code}`));\n          }\n        });\n      });\n\n      const cp2 = child_process.spawn('pnpm', ['install'], {\n        cwd: path.join(appPackagesDir, packageBaseName),\n      });\n      cp2.stdout.pipe(process.stdout);\n      cp2.stderr.pipe(process.stderr);\n      await new Promise((resolve, reject) => {\n        cp2.on('close', (code) => {\n          if (code === 0) {\n            resolve(null);\n          } else {\n            reject(new Error(`pnpm install failed with code ${code}`));\n          }\n        });\n      });\n\n      const cp3 = child_process.spawn('pnpm', ['build'], {\n        cwd: path.join(appPackagesDir, packageBaseName),\n      });\n      cp3.stdout.pipe(process.stdout);\n      cp3.stderr.pipe(process.stderr);\n      await new Promise((resolve, reject) => {\n        cp3.on('close', (code) => {\n          if (code === 0) {\n            resolve(null);\n          } else {\n            reject(new Error(`pnpm build failed with code ${code}`));\n          }\n        });\n      });\n\n      return `file:${path.join(appPackagesDir, packageBaseName)}`;\n    }));\n    const installPackages = [...npm, ...github];\n    await new Promise((resolve, reject) => {\n      const cp = child_process.spawn(\n        path.join(__dirname, 'node_modules', '.bin', 'pnpm'),\n        [\n          'install',\n          ...installPackages,\n        ],\n        {\n          cwd: appDir,\n        },\n      );\n      cp.stdout.pipe(process.stdout);\n      cp.stderr.pipe(process.stderr);\n      cp.on('close', (code) => {\n        if (code === 0) {\n          resolve(null);\n        } else {\n          reject(new Error(`pnpm install failed with code ${code}`));\n        }\n      });\n      cp.on('error', (err) => {\n        reject(err);\n      });\n    });\n\n    // Start MCP servers from configuration\n    const pnpmLockYamlPath = path.resolve(appDir, \"pnpm-lock.yaml\");\n    const pnpmPackageLookup = new PnpmPackageLookup({\n      pnpmLockYamlPath,\n    });\n    const serverPortMap = new Map<string, number>();\n    const cps = await Promise.all(installPackages.map(async (server: string, index: number) => {\n      const packageSpecifier = await pnpmPackageLookup.getPackageNameBySpecifier(server);\n      if (!packageSpecifier) {\n        throw new Error(`Package specifier not found: ${server}`);\n      }\n      const port = this.internalPortStart + index;\n      const dirName = path.join(appDir, 'node_modules', packageSpecifier);\n\n      const env: Record<string, string> = envs[index];\n      const envString = Object.entries(env)\n        .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n        .join(' ');\n      const command = `${envString} pnpm --dir ${JSON.stringify(dirName)} start`;\n      console.log('plugin command', command);\n      const cp = child_process.spawn(path.join(__dirname, 'node_modules', '.bin', 'supergateway'), [\n        '--stdio',\n        command,\n        '--port',\n        port + '',\n      ], {\n        stdio: 'pipe',\n        env: process.env,\n      });\n      cp.stdout.pipe(process.stdout);\n      cp.stderr.pipe(process.stderr);\n      \n      // Store server name and port mapping\n      const serverRef = encodeURIComponent(allServers[index]);\n      serverPortMap.set(serverRef, port);\n\n      return {\n        serverRef,\n      };\n    }));\n\n    {\n      // Create a new Hono app instance\n      const app = new Hono();\n\n      // Define routes\n      app.get('/', (c) => {\n        return c.json({\n            message: 'MCP Server is running'\n        });\n      });\n      cps.forEach((cp: {\n        serverRef: string,\n      }) => {\n        app.all(`/${cp.serverRef}`, async (c) => {\n          const targetPort = serverPortMap.get(cp.serverRef);\n          if (!targetPort) {\n            return c.json({ error: 'Server not found' }, 404);\n          }\n          \n          const req = c.req.raw;\n          const target = `http://localhost:${targetPort}/sse`;\n\n          const proxyRes = await fetch(target, {\n            method: req.method,\n            body: req.body,\n            headers: req.headers,\n          });\n          return proxyRes;\n        });\n      });\n\n      // Start the server\n      serve({\n        fetch: app.fetch,\n        port: this.port,\n      }, () => {\n        console.log(`MCP Server is running on port ${this.port}`);\n        console.log('running servers:\\n', allServers.map(server => `  http://localhost:${this.port}/${encodeURIComponent(server)}`).join('\\n'));\n      });\n    }\n  }\n}\nexport default SimpleMcpServer;\n\n// Add command line parsing if this is the main module\nif (import.meta.url === import.meta.resolve(process.argv[1])) {\n  dotenv.config();\n\n  const program = new Command();\n  \n  program\n    .name('simple-mcp-server')\n    .description('A server for managing MCP (Model Context Protocol) providers')\n    .version('0.0.1')\n    .argument('[config]', 'Path to servers configuration file')\n    .action(async (config) => {\n      if (!config) {\n        throw new Error('No servers configuration file argument provided');\n      }\n\n      // Set port from command line\n      const port = Number(process.env.PORT) || undefined;\n      \n      try {\n        // Load servers configuration from the specified path\n        const configPath = path.resolve(config);\n        \n        const fileContent = await fs.readFile(configPath, 'utf-8');\n        // console.log('git file content', fileContent);\n        const serversJson = JSON.parse(fileContent);\n        \n        // Start the server\n        const server = new SimpleMcpServer({ serversJson, port });\n        await server.start();\n      } catch (error) {\n        console.error('Failed to start MCP server:', error);\n        process.exit(1);\n      }\n    });\n  program.parse();\n}\n"],"mappings":"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","names":[]}